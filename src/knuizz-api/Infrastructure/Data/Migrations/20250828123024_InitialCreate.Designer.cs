// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using knuizz_api.Infrastructure.Data;

#nullable disable

namespace knuizz_api.Infrastructure.Data.Migrations
{
    [DbContext(typeof(KnuizzDbContext))]
    [Migration("20250828123024_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("knuizz_api.Domain.Entities.MatchHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserQuizId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserQuizId");

                    b.ToTable("MatchHistories");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CorrectAnswerIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("UserQuizId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserQuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.UserQuiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("UserQuizzes");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.UserStatistics", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("TotalAnswers")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserStatistics");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.MatchHistory", b =>
                {
                    b.HasOne("knuizz_api.Domain.Entities.User", "User")
                        .WithMany("MatchHistories")
                        .HasForeignKey("UserId");

                    b.HasOne("knuizz_api.Domain.Entities.UserQuiz", "UserQuiz")
                        .WithMany()
                        .HasForeignKey("UserQuizId");

                    b.Navigation("User");

                    b.Navigation("UserQuiz");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.Question", b =>
                {
                    b.HasOne("knuizz_api.Domain.Entities.UserQuiz", "UserQuiz")
                        .WithMany("Questions")
                        .HasForeignKey("UserQuizId");

                    b.Navigation("UserQuiz");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.UserQuiz", b =>
                {
                    b.HasOne("knuizz_api.Domain.Entities.User", "Author")
                        .WithMany("Quizzes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.UserStatistics", b =>
                {
                    b.HasOne("knuizz_api.Domain.Entities.User", "User")
                        .WithOne("Statistics")
                        .HasForeignKey("knuizz_api.Domain.Entities.UserStatistics", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.User", b =>
                {
                    b.Navigation("MatchHistories");

                    b.Navigation("Quizzes");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("knuizz_api.Domain.Entities.UserQuiz", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
